{"version":3,"sources":["../src/main.ts","../../../src/main.ts","../src/utils/apiResponse.ts","../src/mocks/appwriteMock.ts","../src/validation/widgetSchema.ts","../src/routes/widgets.ts","../src/routes/errors.ts"],"sourcesContent":["import { inspect } from 'node:util';\n\nimport type {\n  AppwriteContext,\n  CatchHandler,\n} from '@kaibun/appwrite-fn-router/types';\nimport { createRouter, handleRequest } from '@kaibun/appwrite-fn-router';\nimport widgetsRouter from './routes/widgets.ts';\nimport errorsRouter from './routes/errors.ts';\n\n// Optionally define a custom JSON response schema:\n// Already available as RouterJSONResponse from the core library\n\nfunction routes(router: ReturnType<typeof createRouter>) {\n  // TODO: test with an async/await handler as well\n\n  router.get('/', (_request, res, log, _error) => {\n    return res.text('Root route hit!');\n  });\n  router.all('/widgets*', widgetsRouter.fetch);\n  router.all('/errors*', errorsRouter.fetch);\n}\n\n// TODO: publish a lib allowing to whitelist/blacklist well-known URIs\n// CSV is available at https://www.iana.org/assignments/well-known-uris/well-known-uris.xhtml\n// For now, let’s brute-force ignore any request starting with these paths:\n// TODO: use a route handler to handle these (but can a route handler match\n// on a list or regex?)\nconst ignoredRoutes = ['/favicon.ico', '/robots.txt', '/.well-known/'];\n\n/**\n * Test function\n */\nexport default async (context: AppwriteContext) => {\n  const { req, res, log, error } = context;\n  let greetings = `${req.method} ${req.path}`;\n  // log(inspect(req, { depth: null }));\n  // log('---\\n');\n  const ignoreRoute = ignoredRoutes.some((route) => req.path.startsWith(route));\n  if (ignoreRoute) {\n    log(greetings + ' (ignored)');\n    // TODO: abide by request’s Accept header (fallback to Content-type, then to text/plain)\n    return res.text(\"I'm a teapot\", 418);\n  }\n  log(greetings + '\\n');\n\n  const CatchHandler: CatchHandler = (err, req, res, log, error, internals) => {\n    log(err ? inspect(err) : 'Unknown error');\n    // Catching E2E tests’ errors.\n    if (req.path.startsWith('/errors')) {\n      return res.json(\n        {\n          status: 'error',\n          message: 'E2E_CUSTOM_ERROR_TRIGGERED',\n          error: err instanceof Error ? err.message : String(err),\n        },\n        500\n      );\n    }\n    throw err; // Otherwise, re-throw to trigger library’s default error handling.\n  };\n\n  const response = await handleRequest(context, routes, {\n    logs: process.env.NODE_ENV === 'development',\n    cors: {\n      allowHeaders: ['Content-Type', 'Authorization', 'X-widget-user-id'],\n    },\n    ittyOptions: {\n      catch: CatchHandler,\n    },\n  });\n\n  // log('\\nFINAL RESPONSE:');\n  log(inspect(response, { depth: null }));\n  // log(response.constructor.name);\n  // log(response.constructor.toString());\n  // Object.keys(response).forEach((key) => {\n  //   log(`Key: ${key}`);\n  // });\n  // Object.getOwnPropertyNames(response).forEach((key) => {\n  //   log(`Prop: ${key}`);\n  // });\n  // log(response.statusCode.toString());\n  // log(response.body!.toString());\n  // log(JSON.stringify(response.headers));\n  // log('--- LEAVING THE FUNCTION HANDLER ---');\n  log('\\n');\n\n  return response;\n};\n","import { inspect } from 'node:util';\nimport { cors, RouterOptions, Router } from 'itty-router';\n\nimport type {\n  AFRContextArgs,\n  InternalObjects,\n  AppwriteContext,\n  AppwriteRequest,\n  AppwriteResponse,\n  DefaultLogger,\n  ErrorLogger,\n  Options,\n  FinalOptions,\n  RouterJSONResponse,\n  AFRRequest,\n  logEnableFn,\n} from '../types/core';\nimport '../types/global.d.ts'; // Import global declarations\n\nconst $ = globalThis;\n\nconst noop = (...args: any[]) => {};\nconst isBoolean = (obj: unknown): obj is boolean => typeof obj === 'boolean';\nconst isFunction = (obj: unknown): obj is CallableFunction =>\n  obj instanceof Function;\nconst isDevelopment =\n  process.env.NODE_ENV === 'development' ||\n  process.env.APP_ENV === 'development';\nconst isTest =\n  process.env.NODE_ENV === 'test' || process.env.APP_ENV === 'test';\n\n/**\n * Default log activation callback: logs are enabled only in development.\n * Users can override this by passing their own function to handleRequest.\n */\nexport const defaultLogFn: logEnableFn = (mode: 'log' | 'errorLog') =>\n  isDevelopment || isTest;\n\nconst isJSONLikeRequest = (req: AppwriteRequest) =>\n  // There so many JSON-like content types, our best bet is to be agnostic.\n  // @see https://www.iana.org/assignments/media-types/media-types.xhtml\n  req.headers['content-type']?.endsWith('+json');\n\n/**\n * @internal\n * CORS preflight middleware that’s Appwrite-compatible (to be used first in before[]).\n */\nexport async function corsPreflightMiddleware(\n  req: AppwriteRequest,\n  res: AppwriteResponse,\n  log: DefaultLogger,\n  error: ErrorLogger,\n  internals: InternalObjects & {\n    preflight: (req: Request) => Response | undefined;\n  }\n) {\n  const response = internals.preflight(internals.request);\n  if (response) {\n    const body = await response.text();\n    const statusCode = response.status;\n    const headers = Object.fromEntries(response.headers.entries());\n    return res.send(body, statusCode, headers);\n  }\n}\n\n/**\n * @internal\n * CORS finalization middleware that’s Appwrite-compatible (to be used last in finally[]).\n */\nexport async function corsFinallyMiddleware(\n  responseFromRoute: any,\n  request: AppwriteRequest,\n  res: AppwriteResponse,\n  log: DefaultLogger,\n  error: ErrorLogger,\n  internals: InternalObjects & {\n    corsify: (res: Response, req: Request) => Response;\n  }\n) {\n  if (responseFromRoute) {\n    const nativeResponse = new Response(\n      responseFromRoute.statusCode === 204 ? null : responseFromRoute.body,\n      {\n        status: responseFromRoute.statusCode,\n        headers: responseFromRoute.headers,\n      }\n    );\n    const corsifiedResponse = internals.corsify(\n      nativeResponse,\n      internals.request\n    );\n    const body = await corsifiedResponse.text();\n    const statusCode = corsifiedResponse.status;\n    const headers = Object.fromEntries(corsifiedResponse.headers.entries());\n    return res.send(body, statusCode, headers);\n  }\n}\n\n/**\n * The router propagates a standard Appwrite signature to handlers:\n * `req, res, log, error` typed as `AppwriteRequest`, `AppwriteResponse`,\n * `DefaultLogger`, `ErrorLogger` respectively.\n *\n * Internal Itty Router middlewares (e.g. preflight/corsify) can access the\n * native Request object (Fetch API) via a fifth argument corresponding to\n * `InternalObjects`.\n */\nexport function createRouter({\n  ...args\n}: RouterOptions<\n  AFRRequest,\n  [AppwriteResponse, DefaultLogger, ErrorLogger, InternalObjects] & any[]\n> = {}) {\n  return Router<\n    AFRRequest,\n    [AppwriteResponse, DefaultLogger, ErrorLogger, InternalObjects] & any[],\n    AppwriteResponse\n  >({\n    ...args,\n  });\n}\n\n/**\n * @internal\n * Normalizes Appwrite request headers as case-insensitive keys, so that you can\n * use either eg. `Authorization` or `authorization` keys in your handlers.\n */\nexport function normalizeHeaders(req: AppwriteRequest) {\n  if (!req || !req.headers || typeof req.headers !== 'object') return;\n  const normalized: Record<string, string> = {};\n  for (const k in req.headers) {\n    if (Object.prototype.hasOwnProperty.call(req.headers, k)) {\n      normalized[k.toLowerCase()] = req.headers[k];\n    }\n  }\n  req.headers = new Proxy(normalized, {\n    get(target, prop: string) {\n      if (typeof prop === 'string') {\n        return target[prop.toLowerCase()];\n      }\n      return undefined;\n    },\n    has(target, prop: string) {\n      if (typeof prop === 'string') {\n        return prop.toLowerCase() in target;\n      }\n      return false;\n    },\n    ownKeys(target) {\n      return Reflect.ownKeys(target);\n    },\n    getOwnPropertyDescriptor(target, prop) {\n      if (typeof prop === 'string' && prop.toLowerCase() in target) {\n        return Object.getOwnPropertyDescriptor(target, prop.toLowerCase());\n      }\n      return undefined;\n    },\n  });\n}\n\n/**\n * @internal\n * Builds the final options from user options and environment.\n */\nexport function buildFinalOptions(options: Options): FinalOptions {\n  return {\n    globals: options.globals ?? true,\n    env: options.env ?? true,\n    log: isBoolean(options.logs)\n      ? options.logs\n      : isFunction(options.logs)\n        ? options.logs('log')\n        : defaultLogFn('log'),\n    errorLog: isBoolean(options.logs)\n      ? options.logs\n      : isFunction(options.logs)\n        ? options.logs('errorLog')\n        : defaultLogFn('errorLog'),\n    ...options,\n  } satisfies FinalOptions;\n}\n\n/**\n * @internal\n * Propagates Appwrite logging functions to the global context, if requested.\n */\nexport function setupGlobalLoggers(\n  finalOptions: Options,\n  log: DefaultLogger,\n  error: ErrorLogger\n) {\n  if (finalOptions.globals) {\n    globalThis.log = log;\n    globalThis.error = error;\n  }\n}\n\n/**\n * @internal\n * Updates the `APPWRITE_FUNCTION_API_KEY` environment variable, if requested.\n */\nexport function setupEnvVars(finalOptions: Options, req: AppwriteRequest) {\n  if (finalOptions.env) {\n    process.env.APPWRITE_FUNCTION_API_KEY = req.headers['x-appwrite-key'] || '';\n  }\n}\n\n/**\n * @internal\n * Enables dynamic CORS configuration.\n */\nexport function buildCorsOptions(finalOptions: Options) {\n  const allowedOrigins: (string | RegExp)[] =\n    finalOptions.cors?.allowedOrigins ?? [];\n  if (isDevelopment) {\n    if (!allowedOrigins.includes('http://localhost:3001')) {\n      allowedOrigins.push('http://localhost:3001');\n    }\n    if (!allowedOrigins.includes('https://localhost:3001')) {\n      allowedOrigins.push('https://localhost:3001');\n    }\n  }\n  return {\n    origin: (origin: string) => {\n      if (!origin) return;\n      for (const allowed of allowedOrigins) {\n        if (typeof allowed === 'string' && allowed === origin) {\n          return origin;\n        }\n        if (allowed instanceof RegExp && allowed.test(origin)) {\n          return origin;\n        }\n      }\n    },\n    allowMethods: finalOptions.cors?.allowMethods ?? [\n      'GET',\n      'POST',\n      'PATCH',\n      'DELETE',\n      'OPTIONS',\n    ],\n    allowHeaders: finalOptions.cors?.allowHeaders ?? [\n      'Content-Type',\n      'Authorization',\n    ],\n  };\n}\n\n/**\n * Runs the router with the Appwrite context, as well as a native `Request` for proper CORS, etc. in the Itty router.\n */\nexport async function runRouter(\n  router: ReturnType<typeof createRouter>,\n  { req, res, log, error }: AppwriteContext\n) {\n  const { headers, method, url } = req;\n  const route = new URL(url);\n\n  // Build the nativeRequest for internal use (CORS, etc.)\n  // Node 18+ and all modern runtimes provide the global Request API\n  let nativeRequest: Request = new Request(url, { headers, method });\n\n  const response = await router.fetch(\n    req, // AppwriteRequest (an itty-router’s RequestLike object)\n    res, // AppwriteResponse\n    log, // DefaultLogger\n    error, // ErrorLogger\n    {\n      request: nativeRequest, // FetchObjects.FetchRequest i.e. a native Request object\n    } as InternalObjects\n  );\n  return response;\n}\n\n/**\n * @internal\n * Centralized error handling for uncatched exceptions stemming from the router.\n * This function may be circumvented by a custom `catch handler in `ittyOptions`.\n */\nexport function handleRequestError(\n  err: unknown,\n  options: FinalOptions,\n  req: AppwriteRequest,\n  res: AppwriteResponse,\n  log: DefaultLogger,\n  error: ErrorLogger\n) {\n  if (options.errorLog) {\n    error(`[appwrite-fn-router] handleRequestError triggered: ${inspect(err)}`);\n  }\n  const message = isDevelopment\n    ? err instanceof Error\n      ? err.message\n      : String(err)\n    : 'An error occurred during request processing the request.';\n  const errorDetails = isDevelopment\n    ? err instanceof Error && err.cause instanceof Error\n      ? err.cause.message\n      : 'Reason unknown'\n    : 'Error details are not available unless in development mode.';\n  if (isJSONLikeRequest(req)) {\n    return res.json(\n      {\n        status: 'error',\n        message,\n        error: errorDetails,\n      } satisfies RouterJSONResponse,\n      500\n    );\n  }\n  return res.text(message + ' ' + errorDetails, 500);\n}\n\n/**\n * Main entry point for handling an Appwrite function HTTP request using the router abstraction.\n *\n * This function orchestrates the full lifecycle of a request:\n *\n * - Normalizes headers for case-insensitive access.\n * - Builds the final options from user options and environment.\n * - Initializes log and error functions, and propagates them globally if requested.\n * - Updates required environment variables (e.g., Appwrite API key) if requested.\n * - Dynamically configures CORS according to environment and options.\n * - Composes middlewares (before/finally) for the router, including CORS and user-provided ones.\n * - Instantiates the router, then delegates to the user-provided `withRouter` callback to define routes.\n * - Executes the router on the request, handles the response and logging.\n * - Handles uncaught errors via handleRequestError.\n *\n * @param context   Appwrite context (req, res, log, error)\n * @param withRouter User function to define routes on the router\n * @param options   Advanced options (CORS, logs, middlewares, etc.)\n * @returns         AppwriteResponseObject generated by the router, or a formatted error\n */\nexport async function handleRequest(\n  context: AppwriteContext,\n  withRouter: (router: ReturnType<typeof createRouter>) => void,\n  options: Options = {}\n) {\n  let { req, res, log: apwLog, error: apwError } = context;\n  let finalOptions: FinalOptions = { log: false, errorLog: false };\n\n  try {\n    normalizeHeaders(req);\n\n    finalOptions = buildFinalOptions(options);\n\n    const log = finalOptions.log ? apwLog : noop;\n    const error = finalOptions.errorLog ? apwError : noop;\n\n    setupGlobalLoggers(finalOptions, log, error);\n    setupEnvVars(finalOptions, req);\n\n    const corsOptions = buildCorsOptions(finalOptions);\n    const { preflight, corsify } = cors(corsOptions);\n\n    const { ittyOptions = {} } = finalOptions;\n    const { before: userBefore = [], finally: userFinally = [] } = ittyOptions;\n\n    const before: Array<(...args: AFRContextArgs) => any> = [\n      (req, res, log, error, internals, ...args) =>\n        corsPreflightMiddleware(req, res, log, error, {\n          ...(internals || {}),\n          preflight,\n        }),\n      ...[].concat(userBefore),\n    ];\n\n    const finallyArr: Array<\n      (responseFromRoute: any, ...args: AFRContextArgs) => any\n    > = [\n      ...[].concat(userFinally),\n      (responseFromRoute, request, res, log, error, internals, ...args) =>\n        corsFinallyMiddleware(responseFromRoute, request, res, log, error, {\n          ...(internals || {}),\n          corsify,\n        }),\n    ];\n\n    const router = createRouter({\n      before,\n      finally: finallyArr,\n      ...ittyOptions, // catch, etc. sont transmis automatiquement\n    });\n\n    withRouter(router);\n    // log(\n    //   '[DEBUG] router.routes (after withRouter call):',\n    //   JSON.stringify(\n    //     router.routes,\n    //     (k, v) =>\n    //       typeof v === 'function'\n    //         ? `[Function: ${v.name || 'anonymous'}]`\n    //         : v,\n    //     2\n    //   )\n    // );\n\n    const response = await runRouter(router, { req, res, log, error });\n    if (!response) {\n      // TODO: abide by request’s Accept header (fallback to Content-type, then to text/plain)\n      return res.text('Not Found', 404);\n    }\n    return response;\n  } catch (err) {\n    // By default, in the absence of a catch handler in `ittyOptions`, itty’s\n    // Router will throw an error. This is the place to handle it.\n    // As we’re handling a thrown error which breaks free of the routing cycle,\n    // there is no `internals` object available here (e.g. no `internals.request`,\n    // although you shouldn’t need it anyway as everything about the request is\n    // readily available through `req`).\n    return handleRequestError(err, finalOptions, req, res, log, error);\n  }\n}\n","import type { AppwriteResponse } from '../../../../types/core';\n\n/**\n * @packageDocumentation\n *\n * Utility for consistent API responses in all routes.\n *\n * Why use apiResponse?\n * - Centralizes response formatting for all API endpoints.\n * - Ensures every response (success or error) follows the same structure.\n * - Reduces code duplication: instead of many calls to res.json,\n *   we use a single function, making future changes easier.\n * - If the underlying response API (res.json) changes, only this\n *   function needs to be updated, not every route handler.\n * - Makes it easier for beginners to understand and maintain the code.\n * - Encourages best practices: clear codes, messages, and error handling.\n *\n * Advanced usage: binding res for less verbose handlers\n * ----------------------------------------------------\n * You can bind the response object to apiResponse using createApiResponder:\n *\n *   const respond = createApiResponder(res);\n *   respond({ code: 'SUCCESS', message: '...', data: ... });\n *\n * This reduces repetition and demonstrates closures in JS/TS.\n *\n * Another advanced technique is currying, which allows partial\n * application of arguments. See:\n * https://developer.mozilla.org/en-US/docs/Glossary/Currying\n */\n\nexport type ApiResponseOptions = {\n  code: string;\n  message: string;\n  data?: any;\n  errors?: string[];\n  status?: number;\n};\n\nexport function apiResponse(res: AppwriteResponse, opts: ApiResponseOptions) {\n  const { code, message, data, errors, status } = opts;\n  const body: Record<string, unknown> = { code, message };\n  if (data !== undefined) body.data = data;\n  if (errors && errors.length) body.errors = errors;\n  return res.json(body, status ?? 200);\n}\n\n/**\n * Binds the response object to apiResponse for easier usage in handlers.\n * This demonstrates closures and reduces repetition in route code.\n */\nexport function createApiResponder(res: AppwriteResponse) {\n  return (opts: ApiResponseOptions) => apiResponse(res, opts);\n}\n","/**\n * Minimal Appwrite’s Node.js SDK mock (databases), with in-memory persistence.\n * Used for testing routes as if using the real Appwrite SDK.\n *\n * @see https://appwrite.io/docs/references/cloud/server-nodejs/databases\n */\n\nimport type { Widget } from '../../../../types/widget';\n\n// In-memory persistence.\nconst widgets: Record<string, Widget> = {};\n\nclass MockClient {\n  private endpoint = '';\n  private project = '';\n  private key = '';\n\n  setEndpoint(endpoint: string) {\n    this.endpoint = endpoint;\n    return this;\n  }\n  setProject(project: string) {\n    this.project = project;\n    return this;\n  }\n  setKey(key: string) {\n    this.key = key;\n    return this;\n  }\n}\n\nclass MockDatabases {\n  constructor(client: MockClient) {\n    // Nothing to do here, just for type compatibility\n  }\n  async listDocuments(databaseId: string, collectionId: string) {\n    return { documents: Object.values(widgets) };\n  }\n  async createDocument(\n    databaseId: string,\n    collectionId: string,\n    documentId: string,\n    data: any\n  ) {\n    const widget: Widget = { $id: documentId, ...data };\n    widgets[documentId] = widget;\n    return widget;\n  }\n  async getDocument(\n    databaseId: string,\n    collectionId: string,\n    documentId: string\n  ) {\n    const widget = widgets[documentId];\n    if (!widget) throw new Error('Document not found');\n    return widget;\n  }\n  async updateDocument(\n    databaseId: string,\n    collectionId: string,\n    documentId: string,\n    data: any\n  ) {\n    if (!widgets[documentId]) throw new Error('Document not found');\n    widgets[documentId] = { ...widgets[documentId], ...data };\n    return widgets[documentId];\n  }\n  async deleteDocument(\n    databaseId: string,\n    collectionId: string,\n    documentId: string\n  ) {\n    if (!widgets[documentId]) throw new Error('Document not found');\n    delete widgets[documentId];\n    return { $id: documentId };\n  }\n  async deleteDocuments(\n    databaseId: string,\n    collectionId: string,\n    queries?: any\n  ) {\n    Object.keys(widgets).forEach((id) => delete widgets[id]);\n    return { deleted: true };\n  }\n}\n\nexport default {\n  Client: MockClient,\n  Databases: MockDatabases,\n};\n","import { z } from 'zod';\n\n// Zod schema for AppwriteDocument\nexport const AppwriteDocumentSchema = z.object({\n  $id: z.string(),\n  $collectionId: z.string(),\n  $databaseId: z.string(),\n  $createdAt: z.string().refine((v) => !isNaN(Date.parse(v)), {\n    message: 'Invalid ISO date',\n  }),\n  $updatedAt: z.string().refine((v) => !isNaN(Date.parse(v)), {\n    message: 'Invalid ISO date',\n  }),\n  $permissions: z.array(z.string()),\n  $sequence: z.number(),\n});\n\n// Zod schema for Widget (extends AppwriteDocument)\nexport const WidgetSchema = AppwriteDocumentSchema.extend({\n  weight: z.number(),\n  color: z.enum(['red', 'blue', 'gold']),\n});\n\nexport type WidgetInput = z.infer<typeof WidgetSchema>;\n","import { createRouter } from '@kaibun/appwrite-fn-router';\nimport type { Widget } from '../../../../types/widget';\nimport { apiResponse, createApiResponder } from '../utils/apiResponse';\n\n// Re-export for convenience\nexport type { Widget };\n\n/**\n * All routes under /widgets/\n */\nconst router = createRouter({ base: '/widgets' });\n\n// --- IN-MEMORY DEMO ---\n// Using the Appwrite mock in ESM\nimport sdk from '../mocks/appwriteMock';\nimport { WidgetSchema } from '../validation/widgetSchema';\n\nconst client = new sdk.Client()\n  .setEndpoint('https://mock-endpoint')\n  .setProject('mock-project')\n  .setKey('mock-key');\nconst databases = new sdk.Databases(client);\n\n// Local config for the mock\nconst MOCK_DB_ID = 'mock-db';\nconst MOCK_COLLECTION_ID = 'mock-collection';\n\n// GET /widgets => List all widgets\nrouter.get('/', async (_req, res) => {\n  const respond = createApiResponder(res);\n  const result = await databases.listDocuments(MOCK_DB_ID, MOCK_COLLECTION_ID);\n  return respond({\n    code: 'SUCCESS',\n    message: 'Widgets fetched',\n    data: { items: result.documents },\n  });\n});\n\n// POST /widgets => Create a widget\nrouter.post('/', async (req, res, _log, _error) => {\n  const respond = createApiResponder(res);\n  try {\n    const body = req.bodyJson;\n    const id = String(Date.now());\n    // Example: check for $id conflict (409)\n    const existing = (\n      await databases.listDocuments(MOCK_DB_ID, MOCK_COLLECTION_ID)\n    ).documents.find((w: Widget) => w.$id === id);\n    if (existing) {\n      return respond({\n        code: 'CONFLICT',\n        message: `A widget with $id '${id}' already exists`,\n        status: 409,\n      });\n    }\n    const widgetCandidate = {\n      $id: id,\n      $collectionId: MOCK_COLLECTION_ID,\n      $databaseId: MOCK_DB_ID,\n      $createdAt: new Date().toISOString(),\n      $updatedAt: new Date().toISOString(),\n      $permissions: [],\n      $sequence: Date.now(),\n      weight: body.weight,\n      color: body.color,\n    };\n    const parseResult = WidgetSchema.safeParse(widgetCandidate);\n    if (!parseResult.success) {\n      return respond({\n        code: 'VALIDATION_ERROR',\n        message: 'Invalid widget data',\n        errors: parseResult.error.issues.map((e) => e.message),\n        status: 400,\n      });\n    }\n    const newWidget = await databases.createDocument(\n      MOCK_DB_ID,\n      MOCK_COLLECTION_ID,\n      id,\n      body\n    );\n    return respond({\n      code: 'SUCCESS',\n      message: 'Widget created',\n      data: newWidget,\n      status: 201,\n    });\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      return respond({\n        code: 'BAD_REQUEST',\n        message: 'Invalid JSON in request body',\n        status: 400,\n      });\n    }\n    _error(String(e));\n    throw e;\n  }\n});\n\n// DELETE /widgets => Delete all widgets\nrouter.delete('/', async (_req, res) => {\n  const respond = createApiResponder(res);\n  await databases.deleteDocuments(MOCK_DB_ID, MOCK_COLLECTION_ID);\n  return respond({\n    code: 'SUCCESS',\n    message: 'All widgets deleted',\n    data: { deleted: true },\n  });\n});\n\n// POST /widgets/bulk => Create multiple widgets\nrouter.post('/bulk', async (req, res, _log, _error) => {\n  const respond = createApiResponder(res);\n  const body = req.bodyJson;\n  try {\n    if (!Array.isArray(body)) {\n      throw new SyntaxError('Expected an array of widgets to create');\n    }\n    const created = [];\n    const errors = [];\n    for (const item of body) {\n      const id = String(Date.now() + Math.random());\n      const widgetCandidate = {\n        $id: id,\n        $collectionId: MOCK_COLLECTION_ID,\n        $databaseId: MOCK_DB_ID,\n        $createdAt: new Date().toISOString(),\n        $updatedAt: new Date().toISOString(),\n        $permissions: [],\n        $sequence: Date.now(),\n        weight: item.weight,\n        color: item.color,\n      };\n      const parseResult = WidgetSchema.safeParse(widgetCandidate);\n      if (!parseResult.success) {\n        errors.push(...parseResult.error.issues.map((e) => e.message));\n        continue;\n      }\n      const newWidget = await databases.createDocument(\n        MOCK_DB_ID,\n        MOCK_COLLECTION_ID,\n        id,\n        item\n      );\n      created.push(newWidget);\n    }\n    if (created.length === 0) {\n      return respond({\n        code: 'VALIDATION_ERROR',\n        message: 'No valid widgets to create',\n        errors,\n        status: 400,\n      });\n    }\n    return respond({\n      code: 'SUCCESS',\n      message: 'Bulk widgets created',\n      data: { items: created, errors },\n      status: 201,\n    });\n  } catch (e) {\n    if (e instanceof SyntaxError) {\n      return respond({\n        code: 'BAD_REQUEST',\n        message: 'Invalid JSON in request body',\n        status: 400,\n      });\n    }\n    _error(String(e));\n    throw e;\n  }\n});\n\n// GET /widgets/secret => Access the daily secret widget (requires Bearer token)\nrouter.get('/secret', (req, res, _log, _error) => {\n  const respond = createApiResponder(res);\n  const authHeader =\n    req.headers['Authorization'] || req.headers['authorization'];\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return respond({\n      code: 'UNAUTHORIZED',\n      message: 'Unauthorized',\n      status: 401,\n    });\n  }\n  return respond({\n    code: 'SUCCESS',\n    message: 'Secret widget fetched',\n    data: { id: 'widget-secret', weight: 200, color: 'gold' },\n  });\n});\n\n// GET /widgets/{id} => Get a specific widget\nrouter.get('/:id', async (req, res) => {\n  const respond = createApiResponder(res);\n  const { id } = req.params;\n  try {\n    const widget = await databases.getDocument(\n      MOCK_DB_ID,\n      MOCK_COLLECTION_ID,\n      id\n    );\n    return respond({\n      code: 'SUCCESS',\n      message: 'Widget fetched',\n      data: widget,\n    });\n  } catch (e) {\n    return respond({\n      code: 'NOT_FOUND',\n      message: 'Widget not found',\n      status: 404,\n    });\n  }\n});\n\n// PATCH /widgets/{id} => Update a widget\nrouter.patch('/:id', async (req, res, _log, _error) => {\n  const respond = createApiResponder(res);\n  try {\n    const { id } = req.params;\n    const body = req.bodyJson;\n    const widgetCandidate = {\n      $id: id,\n      $collectionId: MOCK_COLLECTION_ID,\n      $databaseId: MOCK_DB_ID,\n      $createdAt: new Date().toISOString(),\n      $updatedAt: new Date().toISOString(),\n      $permissions: [],\n      $sequence: Date.now(),\n      weight: body.weight,\n      color: body.color,\n    };\n    const parseResult = WidgetSchema.safeParse(widgetCandidate);\n    if (!parseResult.success) {\n      return respond({\n        code: 'VALIDATION_ERROR',\n        message: 'Invalid widget data',\n        errors: parseResult.error.issues.map((e) => e.message),\n        status: 400,\n      });\n    }\n    const updatedWidget = await databases.updateDocument(\n      MOCK_DB_ID,\n      MOCK_COLLECTION_ID,\n      id,\n      body\n    );\n    return respond({\n      code: 'SUCCESS',\n      message: 'Widget updated',\n      data: updatedWidget,\n    });\n  } catch (e) {\n    if (e instanceof Error && e.message === 'Document not found') {\n      return respond({\n        code: 'NOT_FOUND',\n        message: 'Widget not found',\n        status: 404,\n      });\n    }\n    if (e instanceof SyntaxError) {\n      return respond({\n        code: 'BAD_REQUEST',\n        message: 'Invalid JSON in request body',\n        status: 400,\n      });\n    }\n    _error(String(e));\n    throw e;\n  }\n});\n\n// DELETE /widgets/{id} => Delete a widget\nrouter.delete('/:id', async (req, res) => {\n  const respond = createApiResponder(res);\n  const { id } = req.params;\n  try {\n    await databases.deleteDocument(MOCK_DB_ID, MOCK_COLLECTION_ID, id);\n    return respond({\n      code: 'SUCCESS',\n      message: 'Widget deleted',\n      data: { deleted: true },\n      status: 204,\n    });\n  } catch (e) {\n    return respond({\n      code: 'NOT_FOUND',\n      message: 'Widget not found',\n      status: 404,\n    });\n  }\n});\n\n// POST /widgets/{id} => Analyze a widget\nrouter.post('/:id', (req, res, _log, _error) => {\n  const respond = createApiResponder(res);\n  const { id } = req.params;\n  return respond({\n    code: 'SUCCESS',\n    message: 'Widget analyzed',\n    data: {\n      id,\n      analysis: 'This widget is amazing!',\n    },\n  });\n});\n\nexport default router;\n","import { createRouter } from '@kaibun/appwrite-fn-router';\n\n/**\n * Routes nested under /errors\n */\nconst router = createRouter({ base: '/errors' });\n\n// GET /errors/throw => Test router’s root error handler by throwing an Error\nrouter.get('/throw', (_req, res, log, _error) => {\n  throw new Error('E2E: This is a test error from /throw');\n});\n\nexport default router;\n"],"mappings":"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","names":["inspect","log","error","router","req","res","client","router","log","router","log","error","req","res","inspect"]}